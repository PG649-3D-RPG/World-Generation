#pragma kernel AverageFilterAdd3x3
#pragma kernel AverageFilterMultiply3x3

static const float avg_3x3 = 1/(float)9;

uint _size_input;
uint _work_item_count;
StructuredBuffer<uint> _work_items;
StructuredBuffer<float> _input;
RWStructuredBuffer<float> _output;

// id.x is work item index, work items are the pixels
[numthreads(256,1,1)]
void AverageFilterAdd3x3 (uint3 id : SV_DispatchThreadID)
{
    uint item = _work_items[id.x];
    if (id.x >= _work_item_count) return; // stop after all work items are done
    uint row = item / _size_input; // integer division => row
    uint col = item % _size_input; // modulo => column

    float sum = 0;

    sum += _input[(row - 1) * _size_input + (col - 1)] * avg_3x3;
    sum += _input[(row - 1) * _size_input + (col)] * avg_3x3;
    sum += _input[(row - 1) * _size_input + (col + 1)] * avg_3x3;
    sum += _input[(row)*_size_input + (col - 1)] * avg_3x3;
    sum += _input[(row)*_size_input + (col)] * avg_3x3;
    sum += _input[(row)*_size_input + (col + 1)] * avg_3x3;
    sum += _input[(row + 1) * _size_input + (col - 1)] * avg_3x3;
    sum += _input[(row + 1) * _size_input + (col)] * avg_3x3;
    sum += _input[(row + 1) * _size_input + (col + 1)] * avg_3x3;
    _output[row * _size_input + col] = sum;
}

// id.x is work item index, work items are the pixels
[numthreads(256,1,1)]
void AverageFilterMultiply3x3 (uint3 id : SV_DispatchThreadID)
{
    const uint item = _work_items[id.x];
    if (id.x >= _work_item_count) return; // stop after all work items are done
    const uint row = item / _size_input; // integer division => row
    const uint col = item % _size_input; // modulo => column


    float sum = _input[row * _size_input + col];

    sum *= _input[(row - 1) * _size_input + (col - 1)] * avg_3x3;
    sum *= _input[(row - 1) * _size_input + (col)] * avg_3x3;
    sum *= _input[(row - 1) * _size_input + (col + 1)] * avg_3x3;
    sum *= _input[(row) * _size_input + (col - 1)] * avg_3x3;
    sum *= _input[(row) * _size_input + (col)] * avg_3x3;
    sum *= _input[(row) * _size_input + (col + 1)] * avg_3x3;
    sum *= _input[(row + 1) * _size_input + (col - 1)] * avg_3x3;
    sum *= _input[(row + 1) * _size_input + (col)] * avg_3x3;
    sum *= _input[(row + 1) * _size_input + (col + 1)] * avg_3x3;
    _output[row * _size_input + col] = sum;
}