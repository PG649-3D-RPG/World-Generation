#pragma kernel GaussianBlur3x3SD1
/* Kernel 3x3 SD=1 normalized
0.07511362	 0.1238414	 0.07511362

0.1238414	 0.20418	 0.1238414

0.07511362	 0.1238414	 0.07511362
*/

/* Kernel 3x3 SD=3 normalized
0.1069973	 0.1131098	 0.1069973

0.1131098	 0.1195715	 0.1131098

0.1069973	 0.1131098	 0.1069973
*/
static const float gauss_3x3_sd1_diag = 0.07511362;
static const float gauss_3x3_sd1_next = 0.1238414;
static const float gauss_3x3_sd1_center = 0.20418;


uint _size;
StructuredBuffer<float> _input;
RWStructuredBuffer<float> _output;

//TODO try implementing with a for-loop for non fixed size
//TODO write a python script to generate gauss and mean fixed size shader code
//TODO implement a mean filter shader
[numthreads(256,1,1)]
void GaussianBlur3x3SD1 (uint3 id : SV_DispatchThreadID)
{
    float sum = 0;
    uint col = id.x % _size; // modulo => column
    uint row = id.x / _size; // integer division => row

    sum += _input[(row - 1) * _size + (col - 1)] * gauss_3x3_sd1_diag;
    sum += _input[(row - 1) * _size + (col)] * gauss_3x3_sd1_next;
    sum += _input[(row - 1) * _size + (col + 1)] * gauss_3x3_sd1_diag;
    sum += _input[(row) * _size + (col - 1)] * gauss_3x3_sd1_next;
    sum += _input[(row) * _size + (col)] * gauss_3x3_sd1_center;
    sum += _input[(row) * _size + (col + 1)] * gauss_3x3_sd1_next;
    sum += _input[(row + 1) * _size + (col - 1)] * gauss_3x3_sd1_diag;
    sum += _input[(row + 1) * _size + (col)] * gauss_3x3_sd1_next;
    sum += _input[(row + 1) * _size + (col + 1)] * gauss_3x3_sd1_diag;

    _output[row*_size+col] = sum;
}